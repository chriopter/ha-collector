blueprint:
  name: Hue Tap Dial
  domain: automation
  input:
    mqtt_topic:
      name: MQTT Topic
      description: Topic of the Philips Hue Tap Dial Switch
      default: zigbee2mqtt/<device name>
    # Dimming inputs
    light_entity:
      name: Light Entity
      description: The light entity to control with dimming (optional)
      default: ""
      selector:
        entity:
          domain: light
    # RIGHT actions
    dial_rotate_right_step:
      name: Dial Rotate Right Step
      description: Brightness change for dial_rotate_right_step event
      default: 3
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
    dial_rotate_right_slow:
      name: Dial Rotate Right Slow
      description: Brightness change for dial_rotate_right_slow event
      default: 7
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
    brightness_step_up:
      name: Brightness Step Up
      description: Brightness change for brightness_step_up event
      default: 10
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
    dial_rotate_right_fast:
      name: Dial Rotate Right Fast
      description: Brightness change for dial_rotate_right_fast event
      default: 40
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
    # LEFT actions
    dial_rotate_left_step:
      name: Dial Rotate Left Step
      description: Brightness change for dial_rotate_left_step event
      default: -3
      selector:
        number:
          min: -100
          max: -1
          unit_of_measurement: "%"
    dial_rotate_left_slow:
      name: Dial Rotate Left Slow
      description: Brightness change for dial_rotate_left_slow event
      default: -7
      selector:
        number:
          min: -100
          max: -1
          unit_of_measurement: "%"
    brightness_step_down:
      name: Brightness Step Down
      description: Brightness change for brightness_step_down event
      default: -10
      selector:
        number:
          min: -100
          max: -1
          unit_of_measurement: "%"
    dial_rotate_left_fast:
      name: Dial Rotate Left Fast
      description: Brightness change for dial_rotate_left_fast event
      default: -40
      selector:
        number:
          min: -100
          max: -1
          unit_of_measurement: "%"
    transition_time:
      name: Default Transition Time
      description: Default time in seconds for brightness transitions (can be overridden by device)
      default: 0.5
      selector:
        number:
          min: 0
          max: 10
          step: 0.1
          unit_of_measurement: "s"
    # Button inputs
    tap_counter:
      name: Counter Helper
      description: Create a counter helper within Home Assistant to monitor the number of button presses on the switch, distinguishing between single and multiple clicks. This helper can be used for various switches, provided that they are not pressed at the same time
      selector:
        entity:
          domain: counter
    last_pressed:
      name: Last Pressed Input Text Helper
      description: Create an input text helper within Home Assistant to keep track of the last button pressed. This will facilitate implementing different rotation actions based on the last button pressed. **Each switch requires a unique helper!**
      selector:
        entity:
          domain: input_text
    # Button 1
    button_1_single_press:
      name: Button 1 Single Press
      default: []
      selector:
        action:
    button_1_double_press:
      name: Button 1 Double Press
      default: []
      selector:
        action:
    button_1_hold:
      name: Button 1 Hold
      default: []
      selector:
        action:
    # Button 2
    button_2_single_press:
      name: Button 2 Single Press
      default: []
      selector:
        action:
    button_2_double_press:
      name: Button 2 Double Press
      default: []
      selector:
        action:
    button_2_hold:
      name: Button 2 Hold
      default: []
      selector:
        action:
    # Button 3
    button_3_single_press:
      name: Button 3 Single Press
      default: []
      selector:
        action:
    button_3_double_press:
      name: Button 3 Double Press
      default: []
      selector:
        action:
    button_3_hold:
      name: Button 3 Hold
      default: []
      selector:
        action:
    # Button 4
    button_4_single_press:
      name: Button 4 Single Press
      default: []
      selector:
        action:
    button_4_double_press:
      name: Button 4 Double Press
      default: []
      selector:
        action:
    button_4_hold:
      name: Button 4 Hold
      default: []
      selector:
        action:

mode: parallel
max: 10
max_exceeded: silent

trigger:
  - platform: mqtt
    topic: !input mqtt_topic

variables:
  action: "{{ trigger.payload_json.action }}"
  changes:
    dial_rotate_right_step: !input dial_rotate_right_step
    dial_rotate_right_slow: !input dial_rotate_right_slow
    brightness_step_up: !input brightness_step_up
    dial_rotate_right_fast: !input dial_rotate_right_fast
    dial_rotate_left_step: !input dial_rotate_left_step
    dial_rotate_left_slow: !input dial_rotate_left_slow
    brightness_step_down: !input brightness_step_down
    dial_rotate_left_fast: !input dial_rotate_left_fast
  input_text_var: !input last_pressed
  counter_var: !input tap_counter

action:
  # First handle dimming if applicable
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.payload_json.action in changes }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light_entity
            data:
              brightness_step_pct: "{{ changes[action] }}"
              transition: !input transition_time

  # Then handle button actions
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.payload_json.action is match('^button_[1-4]_press$') }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ trigger.payload_json.action | regex_replace(find='[^1-4]', replace='') != states(input_text_var) }}"
            then:
              - service: counter.reset
                target:
                  entity_id: "{{ counter_var }}"
          - service: input_text.set_value
            data:
              value: "{{ trigger.payload_json.action | regex_replace(find='[^1-4]', replace='') }}"
            target:
              entity_id: "{{ input_text_var }}"
          - service: counter.increment
            target:
              entity_id: "{{ counter_var }}"
          - delay:
              seconds: 1
          - service: counter.reset
            target:
              entity_id: "{{ counter_var }}"
      - conditions:
          - condition: template
            value_template: "{{ trigger.payload_json.action is match('button_[1-4]_press_release') and states(counter_var) > '1' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.payload_json.action == 'button_1_press_release' }}"
                sequence: !input button_1_double_press
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.payload_json.action == 'button_2_press_release' }}"
                sequence: !input button_2_double_press
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.payload_json.action == 'button_3_press_release' }}"
                sequence: !input button_3_double_press
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.payload_json.action == 'button_4_press_release' }}"
                sequence: !input button_4_double_press
    default:
      - if:
          - condition: template
            value_template: "{{ trigger.payload_json.action is match('button_[1-4]_press_release') }}"
        then:
          - delay:
              milliseconds: 250
          - if:
              - condition: template
                value_template: "{{ states(counter_var) > '1' }}"
            then:
              - stop: Double tap detected
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.payload_json.action == 'button_1_press_release' }}"
            sequence: !input button_1_single_press
          - conditions:
              - condition: template
                value_template: "{{ trigger.payload_json.action == 'button_1_hold' }}"
            sequence: !input button_1_hold
          - conditions:
              - condition: template
                value_template: "{{ trigger.payload_json.action == 'button_2_press_release' }}"
            sequence: !input button_2_single_press
          - conditions:
              - condition: template
                value_template: "{{ trigger.payload_json.action == 'button_2_hold' }}"
            sequence: !input button_2_hold
          - conditions:
              - condition: template
                value_template: "{{ trigger.payload_json.action == 'button_3_press_release' }}"
            sequence: !input button_3_single_press
          - conditions:
              - condition: template
                value_template: "{{ trigger.payload_json.action == 'button_3_hold' }}"
            sequence: !input button_3_hold
          - conditions:
              - condition: template
                value_template: "{{ trigger.payload_json.action == 'button_4_press_release' }}"
            sequence: !input button_4_single_press
          - conditions:
              - condition: template
                value_template: "{{ trigger.payload_json.action == 'button_4_hold' }}"
            sequence: !input button_4_hold
