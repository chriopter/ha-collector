blueprint:
  name: Hue Tap Dial Advanced
  description: Control lights and covers with a Hue Tap Dial Switch with configurable dimming speeds
  domain: automation
  input:
    # MQTT Topic
    mqtt_topic:
      name: MQTT Topic
      description: Topic of your Hue Tap Dial Switch
      selector:
        text:

    # Dimming Values
    dim_step:
      name: Step Dimming Value
      description: Brightness change for step rotation (1-100)
      default: 3
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
    dim_slow:
      name: Slow Dimming Value
      description: Brightness change for slow rotation (1-100)
      default: 7
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
    dim_fast:
      name: Fast Dimming Value
      description: Brightness change for fast rotation (1-100)
      default: 15
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"
    dim_step_brightness:
      name: Brightness Step Value
      description: Brightness change for brightness step (1-100)
      default: 10
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    # Light Targets
    button_1_lights:
      name: Button 1 Lights
      description: Lights controlled by Button 1
      selector:
        target:
          entity:
            domain: light
    button_2_lights:
      name: Button 2 Lights
      description: Lights controlled by Button 2
      selector:
        target:
          entity:
            domain: light
    button_3_lights:
      name: Button 3 Lights
      description: Lights controlled by Button 3
      selector:
        target:
          entity:
            domain: light
    button_4_targets:
      name: Button 4 Targets
      description: Entities or areas controlled by Button 4
      selector:
        target:
          entity:
            domain: cover

    # Button Actions
    button_1_press:
      name: Button 1 Press Action
      default: []
      selector:
        action: {}
    button_1_hold:
      name: Button 1 Hold Action
      default: []
      selector:
        action: {}
    button_2_press:
      name: Button 2 Press Action
      default: []
      selector:
        action: {}
    button_2_hold:
      name: Button 2 Hold Action
      default: []
      selector:
        action: {}
    button_3_press:
      name: Button 3 Press Action
      default: []
      selector:
        action: {}
    button_3_hold:
      name: Button 3 Hold Action
      default: []
      selector:
        action: {}
    button_4_press:
      name: Button 4 Press Action
      default: []
      selector:
        action: {}
    button_4_hold:
      name: Button 4 Hold Action
      default: []
      selector:
        action: {}

triggers:
  - topic: !input mqtt_topic
    trigger: mqtt

variables:
  action: "{{ trigger.payload_json.action }}"

actions:
  - choose:
      # Button 1
      - conditions:
          - condition: template
            value_template: "{{ action == 'button_1_press_release' }}"
        sequence: !input button_1_press
      - conditions:
          - condition: template
            value_template: "{{ action == 'button_1_hold' }}"
        sequence: !input button_1_hold

      # Button 2
      - conditions:
          - condition: template
            value_template: "{{ action == 'button_2_press_release' }}"
        sequence: !input button_2_press
      - conditions:
          - condition: template
            value_template: "{{ action == 'button_2_hold' }}"
        sequence: !input button_2_hold

      # Button 3
      - conditions:
          - condition: template
            value_template: "{{ action == 'button_3_press_release' }}"
        sequence: !input button_3_press
      - conditions:
          - condition: template
            value_template: "{{ action == 'button_3_hold' }}"
        sequence: !input button_3_hold

      # Button 4
      - conditions:
          - condition: template
            value_template: "{{ action == 'button_4_press_release' }}"
        sequence: !input button_4_press
      - conditions:
          - condition: template
            value_template: "{{ action == 'button_4_hold' }}"
        sequence: !input button_4_hold

      # Rotation handling
      - conditions:
          - condition: template
            value_template: "{{ action is match 'dial_rotate_.*' }}"
        sequence:
          - variables:
              brightness_change: |
                {% set changes = {
                  'dial_rotate_right_step': input.dim_step,
                  'dial_rotate_right_slow': input.dim_slow,
                  'dial_rotate_right_fast': input.dim_fast,
                  'dial_rotate_left_step': -input.dim_step,
                  'dial_rotate_left_slow': -input.dim_slow,
                  'dial_rotate_left_fast': -input.dim_fast,
                  'brightness_step_up': input.dim_step_brightness,
                  'brightness_step_down': -input.dim_step_brightness
                } %} {{ changes[action] | default(0) }}
              target_lights: >
                {% set button = states('input_text.lichtschalter_wohnzimmer_last_button') %}
                {% if button == '1' %}
                  {{ input.button_1_lights.entity_id }}
                {% elif button == '2' %}
                  {{ input.button_2_lights.entity_id }}
                {% elif button == '3' %}
                  {{ input.button_3_lights.entity_id }}
                {% else %}
                  {{ input.button_1_lights.entity_id }}
                {% endif %}
          - target:
              entity_id: "{{ target_lights }}"
            action: light.turn_on
            data:
              transition: 1
              brightness_step_pct: "{{ brightness_change }}"