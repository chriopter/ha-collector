blueprint:
  name: Hue Tap Dial Z2M
  domain: automation
  input:
    mqtt_topic:
      name: "MQTT Topic"
      description: "MQTT topic for the Philips Hue Tap Dial Switch"
      default: "zigbee2mqtt/<device name>"

    ## Button 1 events
    button_1_press:
      name: "Button 1 Press"
      default: []
      selector:
        action: {}
    button_1_press_release:
      name: "Button 1 Press Release"
      default: []
      selector:
        action: {}
    button_1_hold:
      name: "Button 1 Hold"
      default: []
      selector:
        action: {}
    button_1_hold_release:
      name: "Button 1 Hold Release"
      default: []
      selector:
        action: {}

    ## Button 2 events
    button_2_press:
      name: "Button 2 Press"
      default: []
      selector:
        action: {}
    button_2_press_release:
      name: "Button 2 Press Release"
      default: []
      selector:
        action: {}
    button_2_hold:
      name: "Button 2 Hold"
      default: []
      selector:
        action: {}
    button_2_hold_release:
      name: "Button 2 Hold Release"
      default: []
      selector:
        action: {}

    ## Button 3 events
    button_3_press:
      name: "Button 3 Press"
      default: []
      selector:
        action: {}
    button_3_press_release:
      name: "Button 3 Press Release"
      default: []
      selector:
        action: {}
    button_3_hold:
      name: "Button 3 Hold"
      default: []
      selector:
        action: {}
    button_3_hold_release:
      name: "Button 3 Hold Release"
      default: []
      selector:
        action: {}

    ## Button 4 events
    button_4_press:
      name: "Button 4 Press"
      default: []
      selector:
        action: {}
    button_4_press_release:
      name: "Button 4 Press Release"
      default: []
      selector:
        action: {}
    button_4_hold:
      name: "Button 4 Hold"
      default: []
      selector:
        action: {}
    button_4_hold_release:
      name: "Button 4 Hold Release"
      default: []
      selector:
        action: {}

    ## Unified Dial Rotation events (applies to all)
    dial_rotate_clockwise:
      name: "Dial Rotate Clockwise (Dim or De-dim)"
      default: []
      selector:
        action: {}
    dial_rotate_counter_clockwise:
      name: "Dial Rotate Counter-Clockwise (Dim or De-dim)"
      default: []
      selector:
        action: {}

mode: parallel

trigger:
  - platform: mqtt
    topic: !input mqtt_topic

# We require a non-empty payload
condition:
  - condition: template
    value_template: "{{ trigger.payload != '' }}"

action:
  # Set a variable 'event' that uses the JSON field if available, else the plain text payload.
  - variables:
      event: >
        {% if trigger.payload.startswith('{') %}
          {{ trigger.payload_json.action }}
        {% else %}
          {{ trigger.payload }}
        {% endif %}
  - choose:
      # Button 1 events
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_1_press' }}"
        sequence: !input button_1_press
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_1_press_release' }}"
        sequence: !input button_1_press_release
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_1_hold' }}"
        sequence: !input button_1_hold
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_1_hold_release' }}"
        sequence: !input button_1_hold_release

      # Button 2 events
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_2_press' }}"
        sequence: !input button_2_press
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_2_press_release' }}"
        sequence: !input button_2_press_release
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_2_hold' }}"
        sequence: !input button_2_hold
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_2_hold_release' }}"
        sequence: !input button_2_hold_release

      # Button 3 events
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_3_press' }}"
        sequence: !input button_3_press
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_3_press_release' }}"
        sequence: !input button_3_press_release
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_3_hold' }}"
        sequence: !input button_3_hold
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_3_hold_release' }}"
        sequence: !input button_3_hold_release

      # Button 4 events
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_4_press' }}"
        sequence: !input button_4_press
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_4_press_release' }}"
        sequence: !input button_4_press_release
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_4_hold' }}"
        sequence: !input button_4_hold
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_4_hold_release' }}"
        sequence: !input button_4_hold_release

      # Unified Dial Rotation events
      - conditions:
          - condition: template
            value_template: "{{ event == 'dial_rotate_clockwise' }}"
        sequence: !input dial_rotate_clockwise
      - conditions:
          - condition: template
            value_template: "{{ event == 'dial_rotate_counter_clockwise' }}"
        sequence: !input dial_rotate_counter_clockwise
