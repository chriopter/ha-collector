blueprint:
  name: Hue Tap Dial Z2M – Combined Dimming & Button Events
  domain: automation
  input:
    mqtt_topic:
      name: "MQTT Topic"
      description: "MQTT topic for the Philips Hue Tap Dial Switch"
      default: "zigbee2mqtt/<device name>"

    target_light:
      name: "Target Light for Dimming"
      description: "Choose the light to control with the dial rotations"
      selector:
        entity:
          domain: light

    ## Button 1 events
    button_1_press:
      name: "Button 1 Press"
      default: []
      selector:
        action: {}
    button_1_press_release:
      name: "Button 1 Press Release"
      default: []
      selector:
        action: {}
    button_1_hold:
      name: "Button 1 Hold"
      default: []
      selector:
        action: {}
    button_1_hold_release:
      name: "Button 1 Hold Release"
      default: []
      selector:
        action: {}

    ## Button 2 events
    button_2_press:
      name: "Button 2 Press"
      default: []
      selector:
        action: {}
    button_2_press_release:
      name: "Button 2 Press Release"
      default: []
      selector:
        action: {}
    button_2_hold:
      name: "Button 2 Hold"
      default: []
      selector:
        action: {}
    button_2_hold_release:
      name: "Button 2 Hold Release"
      default: []
      selector:
        action: {}

    ## Button 3 events
    button_3_press:
      name: "Button 3 Press"
      default: []
      selector:
        action: {}
    button_3_press_release:
      name: "Button 3 Press Release"
      default: []
      selector:
        action: {}
    button_3_hold:
      name: "Button 3 Hold"
      default: []
      selector:
        action: {}
    button_3_hold_release:
      name: "Button 3 Hold Release"
      default: []
      selector:
        action: {}

    ## Button 4 events
    button_4_press:
      name: "Button 4 Press"
      default: []
      selector:
        action: {}
    button_4_press_release:
      name: "Button 4 Press Release"
      default: []
      selector:
        action: {}
    button_4_hold:
      name: "Button 4 Hold"
      default: []
      selector:
        action: {}
    button_4_hold_release:
      name: "Button 4 Hold Release"
      default: []
      selector:
        action: {}

    ## Numeric inputs for brightness adjustment (in percent)
    dial_rotate_right_step_pct:
      name: "Right – Step Increase (%)"
      description: "Brightness change for a right step event (e.g., 2 for 2% increase)"
      default: 2
      selector:
        number:
          mode: box
          min: 0
          max: 100
    dial_rotate_right_slow_pct:
      name: "Right – Slow Increase (%)"
      description: "Brightness change for a right slow event (e.g., 5 for 5% increase)"
      default: 5
      selector:
        number:
          mode: box
          min: 0
          max: 100
    brightness_step_up_pct:
      name: "Right – Quarter-Step Increase (%)"
      description: "Brightness change for a quarter-step increase (e.g., 25 for 25% increase)"
      default: 25
      selector:
        number:
          mode: box
          min: 0
          max: 100
    dial_rotate_right_fast_pct:
      name: "Right – Fast Increase (%)"
      description: "Brightness change for a right fast event (e.g., 10 for 10% increase)"
      default: 10
      selector:
        number:
          mode: box
          min: 0
          max: 100

    dial_rotate_left_step_pct:
      name: "Left – Step Decrease (%)"
      description: "Brightness change for a left step event (enter as a positive number; it will decrease brightness)"
      default: 2
      selector:
        number:
          mode: box
          min: 0
          max: 100
    dial_rotate_left_slow_pct:
      name: "Left – Slow Decrease (%)"
      description: "Brightness change for a left slow event (enter as a positive number; it will decrease brightness)"
      default: 5
      selector:
        number:
          mode: box
          min: 0
          max: 100
    brightness_step_down_pct:
      name: "Left – Quarter-Step Decrease (%)"
      description: "Brightness change for a quarter-step decrease (enter as a positive number; it will decrease brightness)"
      default: 25
      selector:
        number:
          mode: box
          min: 0
          max: 100
    dial_rotate_left_fast_pct:
      name: "Left – Fast Decrease (%)"
      description: "Brightness change for a left fast event (enter as a positive number; it will decrease brightness)"
      default: 10
      selector:
        number:
          mode: box
          min: 0
          max: 100

mode: parallel

trigger:
  - platform: mqtt
    topic: !input mqtt_topic

condition:
  - condition: template
    value_template: "{{ trigger.payload_json.action is defined }}"

action:
  # Normalize the incoming event:
  - variables:
      event: "{{ trigger.payload_json.action }}"
  - choose:
      # ––– Button Events –––
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_1_press' }}"
        sequence: !input button_1_press
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_1_press_release' }}"
        sequence: !input button_1_press_release
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_1_hold' }}"
        sequence: !input button_1_hold
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_1_hold_release' }}"
        sequence: !input button_1_hold_release

      - conditions:
          - condition: template
            value_template: "{{ event == 'button_2_press' }}"
        sequence: !input button_2_press
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_2_press_release' }}"
        sequence: !input button_2_press_release
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_2_hold' }}"
        sequence: !input button_2_hold
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_2_hold_release' }}"
        sequence: !input button_2_hold_release

      - conditions:
          - condition: template
            value_template: "{{ event == 'button_3_press' }}"
        sequence: !input button_3_press
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_3_press_release' }}"
        sequence: !input button_3_press_release
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_3_hold' }}"
        sequence: !input button_3_hold
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_3_hold_release' }}"
        sequence: !input button_3_hold_release

      - conditions:
          - condition: template
            value_template: "{{ event == 'button_4_press' }}"
        sequence: !input button_4_press
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_4_press_release' }}"
        sequence: !input button_4_press_release
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_4_hold' }}"
        sequence: !input button_4_hold
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_4_hold_release' }}"
        sequence: !input button_4_hold_release

      # ––– Dial (Dimming) Events –––
      # Right / Increase brightness
      - conditions:
          - condition: template
            value_template: "{{ event == 'dial_rotate_right_step' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input target_light
            data_template:
              brightness_step_pct: "{{ (states(input_target_light) | float) + (states(input_dial_rotate_right_step_pct) | float) }}"
      - conditions:
          - condition: template
            value_template: "{{ event == 'dial_rotate_right_slow' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input target_light
            data_template:
              brightness_step_pct: "{{ (states(input_target_light) | float) + (states(input_dial_rotate_right_slow_pct) | float) }}"
      - conditions:
          - condition: template
            value_template: "{{ event == 'brightness_step_up' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input target_light
            data_template:
              brightness_step_pct: "{{ (states(input_target_light) | float) + (states(input_brightness_step_up_pct) | float) }}"
      - conditions:
          - condition: template
            value_template: "{{ event == 'dial_rotate_right_fast' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input target_light
            data_template:
              brightness_step_pct: "{{ (states(input_target_light) | float) + (states(input_dial_rotate_right_fast_pct) | float) }}"

      # Left / Decrease brightness
      - conditions:
          - condition: template
            value_template: "{{ event == 'dial_rotate_left_step' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input target_light
            data_template:
              brightness_step_pct: "{{ (states(input_target_light) | float) - (states(input_dial_rotate_left_step_pct) | float) }}"
      - conditions:
          - condition: template
            value_template: "{{ event == 'dial_rotate_left_slow' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input target_light
            data_template:
              brightness_step_pct: "{{ (states(input_target_light) | float) - (states(input_dial_rotate_left_slow_pct) | float) }}"
      - conditions:
          - condition: template
            value_template: "{{ event == 'brightness_step_down' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input target_light
            data_template:
              brightness_step_pct: "{{ (states(input_target_light) | float) - (states(input_brightness_step_down_pct) | float) }}"
      - conditions:
          - condition: template
            value_template: "{{ event == 'dial_rotate_left_fast' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input target_light
            data_template:
              brightness_step_pct: "{{ (states(input_target_light) | float) - (states(input_dial_rotate_left_fast_pct) | float) }}"
