blueprint:
  name: Hue Tap Dial Z2M v8
  domain: automation
  input:
    mqtt_topic:
      name: "MQTT Topic"
      description: "MQTT topic for the Philips Hue Tap Dial Switch"
      default: "zigbee2mqtt/<device name>"

    ## Button 1 events
    button_1_press:
      name: "Button 1 Press"
      default: []
      selector:
        action: {}
    button_1_press_release:
      name: "Button 1 Press Release"
      default: []
      selector:
        action: {}
    button_1_hold:
      name: "Button 1 Hold"
      default: []
      selector:
        action: {}
    button_1_hold_release:
      name: "Button 1 Hold Release"
      default: []
      selector:
        action: {}

    ## Button 2 events
    button_2_press:
      name: "Button 2 Press"
      default: []
      selector:
        action: {}
    button_2_press_release:
      name: "Button 2 Press Release"
      default: []
      selector:
        action: {}
    button_2_hold:
      name: "Button 2 Hold"
      default: []
      selector:
        action: {}
    button_2_hold_release:
      name: "Button 2 Hold Release"
      default: []
      selector:
        action: {}

    ## Button 3 events
    button_3_press:
      name: "Button 3 Press"
      default: []
      selector:
        action: {}
    button_3_press_release:
      name: "Button 3 Press Release"
      default: []
      selector:
        action: {}
    button_3_hold:
      name: "Button 3 Hold"
      default: []
      selector:
        action: {}
    button_3_hold_release:
      name: "Button 3 Hold Release"
      default: []
      selector:
        action: {}

    ## Button 4 events
    button_4_press:
      name: "Button 4 Press"
      default: []
      selector:
        action: {}
    button_4_press_release:
      name: "Button 4 Press Release"
      default: []
      selector:
        action: {}
    button_4_hold:
      name: "Button 4 Hold"
      default: []
      selector:
        action: {}
    button_4_hold_release:
      name: "Button 4 Hold Release"
      default: []
      selector:
        action: {}

    ## Dial events
    # Unified dimming action
    dimming_action:
      name: "Dimming Action"
      description: "Single action for ALL brightness changes. When dimming up, only affects lights that are already on."
      selector:
        action: {}

    # Step size configurations
    step_size_right_step:
      name: "Single Step Up Size"
      description: "Brightness step size (%) for single step rotation right"
      default: 10
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    step_size_right_slow:
      name: "Slow Turn Up Size"
      description: "Brightness step size (%) for slow rotation right"
      default: 5
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    step_size_right_quarter:
      name: "Quarter Turn Up Size"
      description: "Brightness step size (%) for quarter turn right"
      default: 25
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    step_size_right_fast:
      name: "Fast Turn Up Size"
      description: "Brightness step size (%) for fast rotation right"
      default: 40
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    step_size_left_step:
      name: "Single Step Down Size"
      description: "Brightness step size (%) for single step rotation left"
      default: 10
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    step_size_left_slow:
      name: "Slow Turn Down Size"
      description: "Brightness step size (%) for slow rotation left"
      default: 5
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    step_size_left_quarter:
      name: "Quarter Turn Down Size"
      description: "Brightness step size (%) for quarter turn left"
      default: 25
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

    step_size_left_fast:
      name: "Fast Turn Down Size"
      description: "Brightness step size (%) for fast rotation left"
      default: 40
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: "%"

mode: parallel

trigger:
  - platform: mqtt
    topic: !input mqtt_topic

condition:
  - condition: template
    value_template: "{{ trigger.payload_json.action is defined }}"

action:
  # Normalize the incoming event and calculate dimming values:
  - variables:
      event: "{{ trigger.payload_json.action }}"
      brightness_step: >
        {% if event == 'dial_rotate_right_step' %}
          {{ !input step_size_right_step }}
        {% elif event == 'dial_rotate_right_slow' %}
          {{ !input step_size_right_slow }}
        {% elif event == 'brightness_step_up' %}
          {{ !input step_size_right_quarter }}
        {% elif event == 'dial_rotate_right_fast' %}
          {{ !input step_size_right_fast }}
        {% elif event == 'dial_rotate_left_step' %}
          {{ -(!input step_size_left_step) }}
        {% elif event == 'dial_rotate_left_slow' %}
          {{ -(!input step_size_left_slow) }}
        {% elif event == 'brightness_step_down' %}
          {{ -(!input step_size_left_quarter) }}
        {% elif event == 'dial_rotate_left_fast' %}
          {{ -(!input step_size_left_fast) }}
        {% else %}
          {{ 0 }}
        {% endif %}
      is_dim_up: "{{ brightness_step > 0 }}"
      # Check if target lights are on (user needs to adapt this to their lights)
      is_light_on: >
        {% set lights = expand(dimming_action.target.entity_id) 
           if dimming_action.target.entity_id is defined 
           else [] %}
        {% for light in lights %}
          {% if light.state == 'on' %}
            {{ true }}
            {% break %}
          {% endif %}
        {% endfor %}
        {{ false }}
  - choose:
      # ––– Button Events –––
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_1_press' }}"
        sequence: !input button_1_press
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_1_press_release' }}"
        sequence: !input button_1_press_release
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_1_hold' }}"
        sequence: !input button_1_hold
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_1_hold_release' }}"
        sequence: !input button_1_hold_release

      - conditions:
          - condition: template
            value_template: "{{ event == 'button_2_press' }}"
        sequence: !input button_2_press
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_2_press_release' }}"
        sequence: !input button_2_press_release
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_2_hold' }}"
        sequence: !input button_2_hold
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_2_hold_release' }}"
        sequence: !input button_2_hold_release

      - conditions:
          - condition: template
            value_template: "{{ event == 'button_3_press' }}"
        sequence: !input button_3_press
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_3_press_release' }}"
        sequence: !input button_3_press_release
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_3_hold' }}"
        sequence: !input button_3_hold
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_3_hold_release' }}"
        sequence: !input button_3_hold_release

      - conditions:
          - condition: template
            value_template: "{{ event == 'button_4_press' }}"
        sequence: !input button_4_press
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_4_press_release' }}"
        sequence: !input button_4_press_release
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_4_hold' }}"
        sequence: !input button_4_hold
      - conditions:
          - condition: template
            value_template: "{{ event == 'button_4_hold_release' }}"
        sequence: !input button_4_hold_release

      # ––– Unified Dimming Events –––
      - conditions:
          - condition: template
            value_template: >
              {{ event in [
                'dial_rotate_right_step',
                'dial_rotate_right_slow',
                'dial_rotate_right_fast',
                'brightness_step_up',
                'dial_rotate_left_step',
                'dial_rotate_left_slow',
                'dial_rotate_left_fast',
                'brightness_step_down'
              ] }}
        sequence:
          # Only proceed if either:
          # 1. We're dimming down (always allowed)
          # 2. We're dimming up AND at least one target light is on
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ not is_dim_up or is_light_on }}"
                sequence: !input dimming_action
