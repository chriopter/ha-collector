blueprint:
  name: Hue Tap Dial
  domain: automation
  input:
    mqtt_topic:
      name: MQTT Topic
      selector:
        text:
    tap_counter:
      name: Counter Helper
      selector:
        entity:
          domain: counter
    last_pressed:
      name: Last Pressed Helper
      selector:
        entity:
          domain: input_text
    button_1_single_press:
      name: Button 1 Single Press
      default: []
      selector:
        action:
    button_1_double_press:
      name: Button 1 Double Press
      default: []
      selector:
        action:
    button_1_hold:
      name: Button 1 Hold
      default: []
      selector:
        action:
    button_2_single_press:
      name: Button 2 Single Press
      default: []
      selector:
        action:
    button_2_double_press:
      name: Button 2 Double Press
      default: []
      selector:
        action:
    button_2_hold:
      name: Button 2 Hold
      default: []
      selector:
        action:
    button_3_single_press:
      name: Button 3 Single Press
      default: []
      selector:
        action:
    button_3_double_press:
      name: Button 3 Double Press
      default: []
      selector:
        action:
    button_3_hold:
      name: Button 3 Hold
      default: []
      selector:
        action:
    button_4_single_press:
      name: Button 4 Single Press
      default: []
      selector:
        action:
    button_4_double_press:
      name: Button 4 Double Press
      default: []
      selector:
        action:
    button_4_hold:
      name: Button 4 Hold
      default: []
      selector:
        action:

mode: parallel
max: 10
max_exceeded: silent

trigger:
  - platform: mqtt
    topic: !input mqtt_topic

condition:
  - condition: template
    value_template: "{{ trigger.payload_json.action != '' }}"

action:
  - variables:
      button: "{{ trigger.payload_json.action | regex_replace(find='[^1-4]', replace='') }}"
      action_type: "{{ trigger.payload_json.action }}"
      last_button: "{{ states(last_pressed) }}"
      press_count: "{{ states(tap_counter) }}"

  - choose:
      # Handle initial button press
      - conditions:
          - "{{ action_type is match('^button_[1-4]_press$') }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ button != last_button }}"
            then:
              - counter.reset: "{{ tap_counter }}"
          - input_text.set_value:
              entity_id: "{{ last_pressed }}"
              value: "{{ button }}"
          - counter.increment: "{{ tap_counter }}"
          - delay:
              seconds: 1
          - counter.reset: "{{ tap_counter }}"

      # Handle double press actions
      - conditions:
          - "{{ action_type is match('button_[1-4]_press_release') and press_count > '1' }}"
        sequence:
          - choose:
              - conditions: ["{{ action_type == 'button_1_press_release' }}"]
                sequence: !input button_1_double_press
              - conditions: ["{{ action_type == 'button_2_press_release' }}"]
                sequence: !input button_2_double_press
              - conditions: ["{{ action_type == 'button_3_press_release' }}"]
                sequence: !input button_3_double_press
              - conditions: ["{{ action_type == 'button_4_press_release' }}"]
                sequence: !input button_4_double_press

    default:
      - choose:
          # Handle single press actions
          - conditions:
              - "{{ action_type is match('button_[1-4]_press_release') }}"
            sequence:
              - delay:
                  milliseconds: 250
              - if:
                  - condition: template
                    value_template: "{{ press_count > '1' }}"
                then:
                  - stop: "Double tap detected"
              - choose:
                  - conditions: ["{{ action_type == 'button_1_press_release' }}"]
                    sequence: !input button_1_single_press
                  - conditions: ["{{ action_type == 'button_2_press_release' }}"]
                    sequence: !input button_2_single_press
                  - conditions: ["{{ action_type == 'button_3_press_release' }}"]
                    sequence: !input button_3_single_press
                  - conditions: ["{{ action_type == 'button_4_press_release' }}"]
                    sequence: !input button_4_single_press

          # Handle hold actions
          - conditions: ["{{ action_type == 'button_1_hold' }}"]
            sequence: !input button_1_hold
          - conditions: ["{{ action_type == 'button_2_hold' }}"]
            sequence: !input button_2_hold
          - conditions: ["{{ action_type == 'button_3_hold' }}"]
            sequence: !input button_3_hold
          - conditions: ["{{ action_type == 'button_4_hold' }}"]
            sequence: !input button_4_hold
